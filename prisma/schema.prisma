generator client {
  provider = "prisma-client-js"
}

generator json {
  provider = "prisma-json-types-generator"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int     @id @default(autoincrement())
  email       String
  name        String
  password    String
  phoneNumber String
  avatar      String?

  totpSecret String?
  status     UserStatus @default(ACTIVE)

  reviews       Review[]
  orders        Order[]
  refreshTokens RefreshToken[]
  carts         CartItem[]
  devices       Device[]

  roleId Int
  role   Role @relation(fields: [roleId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  sentMessages     Message[] @relation("FromUser")
  receivedMessages Message[] @relation("ToUser")

  createdRoles Role[] @relation("RoleCreatedBy")
  updatedRoles Role[] @relation("RoleUpdatedBy")
  deletedRoles Role[] @relation("RoleDeletedBy")

  createdPermissions Permission[] @relation("PermissionCreatedBy")
  updatedPermissions Permission[] @relation("PermissionUpdatedBy")
  deletedPermissions Permission[] @relation("PermissionDeletedBy")

  createdProducts Product[] @relation("ProductCreatedBy")
  updatedProducts Product[] @relation("ProductUpdatedBy")
  deletedProducts Product[] @relation("ProductDeletedBy")

  createdCategories Category[] @relation("CategoryCreatedBy")
  updatedCategories Category[] @relation("CategoryUpdatedBy")
  deletedCategories Category[] @relation("CategoryDeletedBy")

  createdSKUS SKU[] @relation("SKUCreatedBy")
  updatedSKUS SKU[] @relation("SKUUpdatedBy")
  deletedSKUS SKU[] @relation("SKUDeletedBy")

  createdLanguages Language[] @relation("LanguageCreatedBy")
  updatedLanguages Language[] @relation("LanguageUpdatedBy")
  deletedLanguages Language[] @relation("LanguageDeletedBy")

  createdProductTranslations ProductTranslation[] @relation("ProductTranslationCreatedBy")
  updatedProductTranslations ProductTranslation[] @relation("ProductTranslationUpdatedBy")
  deletedProductTranslations ProductTranslation[] @relation("ProductTranslationDeletedBy")

  createdCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationCreatedBy")
  updatedCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationUpdatedBy")
  deletedCategoryTranslations CategoryTranslation[] @relation("CategoryTranslationDeletedBy")

  createdOrders Order[] @relation("OrderCreatedBy")
  updatedOrders Order[] @relation("OrderUpdatedBy")
  deletedOrders Order[] @relation("OrderDeletedBy")

  createdById  Int?
  createdBy    User?  @relation("CreatorUsers", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  createdUsers User[] @relation("CreatorUsers")

  updatedById  Int?
  updatedBy    User?  @relation("UpdatorUsers", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedUsers User[] @relation("UpdatorUsers")

  deletedById  Int?
  deletedBy    User?  @relation("DeletorUsers", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedUsers User[] @relation("DeletorUsers")

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Role {
  id          Int          @id @default(autoincrement())
  name        String
  description String       @default("")
  isActive    Boolean      @default(true)
  permissions Permission[]
  users       User[]

  createdById Int?
  createdBy   User? @relation("RoleCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("RoleUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("RoleDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model Permission {
  id          Int        @id @default(autoincrement())
  name        String
  description String     @default("")
  path        String
  method      HTTPMethod
  module      String     @default("")
  roles       Role[]

  createdById Int?
  createdBy   User? @relation("PermissionCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("PermissionUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("PermissionDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
}

model RefreshToken {
  token String @unique

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  deviceId Int // Foreign key tá»›i Device
  device   Device @relation(fields: [deviceId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  expiresAt DateTime
  createdAt DateTime @default(now())
}

model CartItem {
  id       Int  @id @default(autoincrement())
  quantity Int
  skuId    Int
  sku      SKU  @relation(fields: [skuId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  userId   Int
  user     User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([userId, skuId])
  @@index([userId])
}

model SKU {
  id    Int    @id @default(autoincrement())
  value String
  price Float
  stock Int
  image String

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  cartItems           CartItem[]
  productSKUSnapshots ProductSKUSnapshot[]

  createdById Int
  createdBy   User  @relation("SKUCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("SKUUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("SKUDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
  @@index([productId])
}

model ProductSKUSnapshot {
  id          Int    @id @default(autoincrement())
  productName String
  skuPrice    Float
  image       String
  skuValue    String
  quantity    Int

  skuId Int?
  sku   SKU? @relation(fields: [skuId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  orderId Int?
  order   Order? @relation(fields: [orderId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  productId Int?
  product   Product? @relation(fields: [productId], references: [id], onDelete: SetNull, onUpdate: NoAction)

  /// [ProductTranslation]
  productTranslation Json

  createdAt DateTime @default(now())
}

model Product {
  id           Int       @id @default(autoincrement())
  name         String
  publishedAt  DateTime?
  basePrice    Float
  virtualPrice Float
  images       String[]

  categories Category[]
  /// [Variants]
  variants   Json

  skus SKU[]

  reviews Review[]

  productTranslations ProductTranslation[]

  orders Order[]

  productSKUSnapshots ProductSKUSnapshot[]

  createdById Int
  createdBy   User  @relation("ProductCreatedBy", fields: [createdById], references: [id], onDelete: Cascade, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("ProductUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("ProductDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model ProductTranslation {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  languageId String
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdById Int?
  createdBy   User? @relation("ProductTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("ProductTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("ProductTranslationDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([productId])
  @@index([deletedAt])
}

model Category {
  id                   Int                   @id @default(autoincrement())
  name                 String
  logo                 String
  product              Product[]
  categoryTranslations CategoryTranslation[]

  parentCategoryId   Int?
  parentCategory     Category?  @relation("ParentCategoryCategories", fields: [parentCategoryId], references: [id], onDelete: SetNull, onUpdate: NoAction)
  childrenCategories Category[] @relation("ParentCategoryCategories")

  createdById Int?
  createdBy   User? @relation("CategoryCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("CategoryUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("CategoryDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@unique([name])
  @@index([deletedAt])
}

model CategoryTranslation {
  id          Int    @id @default(autoincrement())
  name        String
  description String

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  languageId String
  language   Language @relation(fields: [languageId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdById Int?
  createdBy   User? @relation("CategoryTranslationCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("CategoryTranslationUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("CategoryTranslationDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Language {
  id   String @id @db.VarChar(5)
  name String

  productTranslations  ProductTranslation[]
  categoryTranslations CategoryTranslation[]

  createdById Int?
  createdBy   User? @relation("LanguageCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("LanguageUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("LanguageDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
}

model Review {
  id          Int           @id @default(autoincrement())
  rating      Int
  content     String
  updateCount Int           @default(0)
  medias      ReviewMedia[]

  orderId Int
  order   Order @relation(fields: [orderId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  productId Int
  product   Product @relation(fields: [productId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([orderId, productId])
  @@index([userId])
  @@index([productId])
}

model Order {
  id       Int                  @id @default(autoincrement())
  status   OrderStatus
  items    ProductSKUSnapshot[]
  products Product[]
  reviews  Review[]

  userId   Int
  user     User @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  /// [Receiver]
  receiver Json

  paymentId Int     @unique
  payment   Payment @relation(fields: [paymentId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  createdById Int?
  createdBy   User? @relation("OrderCreatedBy", fields: [createdById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  updatedById Int?
  updatedBy   User? @relation("OrderUpdatedBy", fields: [updatedById], references: [id], onDelete: SetNull, onUpdate: NoAction)
  deletedById Int?
  deletedBy   User? @relation("OrderDeletedBy", fields: [deletedById], references: [id], onDelete: SetNull, onUpdate: NoAction)

  deletedAt DateTime?
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt

  @@index([deletedAt])
  @@index([status, deletedAt])
}

model Device {
  id            Int            @id @default(autoincrement())
  userAgent     String
  ip            String
  isActive      Boolean        @default(true)
  refreshTokens RefreshToken[]

  userId Int
  user   User @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  lastActive DateTime @updatedAt
  createdAt  DateTime @default(now())
}

model ReviewMedia {
  id   Int       @id @default(autoincrement())
  url  String
  type MediaType

  reviewId Int
  review   Review @relation(fields: [reviewId], references: [id], onDelete: Cascade, onUpdate: NoAction)

  createdAt DateTime @default(now())
}

model Payment {
  id        Int           @id @default(autoincrement())
  order     Order?
  status    PaymentStatus
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
}

model PaymentTransaction {
  id                 Int      @id @default(autoincrement())
  gateway            String   @db.VarChar(100)
  transactionDate    DateTime @default(now())
  accountNumber      String?  @db.VarChar(100)
  subAccount         String?  @db.VarChar(250)
  amountIn           Int      @default(0)
  amountOut          Int      @default(0)
  accumulated        Int      @default(0)
  code               String?  @db.VarChar(250)
  transactionContent String?  @db.Text
  referenceNumber    String?  @db.VarChar(255)
  body               String?  @db.Text

  createdAt DateTime @default(now())
}

model Message {
  id         Int    @id @default(autoincrement())
  fromUserId Int
  fromUser   User   @relation("FromUser", fields: [fromUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  toUserId   Int
  toUser     User   @relation("ToUser", fields: [toUserId], references: [id], onDelete: Cascade, onUpdate: NoAction)
  content    String

  readAt    DateTime?
  createdAt DateTime  @default(now())
}

model VerificationCode {
  id    Int                  @id @default(autoincrement())
  email String               @db.VarChar(500)
  code  String               @db.VarChar(50)
  type  VerificationCodeType

  expiresAt DateTime
  createdAt DateTime @default(now())

  @@unique([email, type])
  @@index([expiresAt])
}

enum VerificationCodeType {
  REGISTER
  FORGOT_PASSWORD
  LOGIN
  DISABLE_2FA
}

enum UserStatus {
  ACTIVE
  INACTIVE
  BLOCKED
}

enum HTTPMethod {
  GET
  POST
  PUT
  DELETE
  PATCH
  OPTIONS
  HEAD
}

enum OrderStatus {
  PENDING_PAYMENT
  PENDING_PICKUP
  PENDING_DELIVERY
  DELIVERED
  RETURNED
  CANCELLED
}

enum MediaType {
  IMAGE
  VIDEO
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
