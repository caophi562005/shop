import React, { useState, useEffect } from "react";
import { useParams } from "react-router-dom";
import io, { Socket } from "socket.io-client";
import "../assets/css/detailProduct.css";
import type { GetProductDetailResType } from "../models/product.model"; // ƒê·∫£m b·∫£o b·∫°n ƒë√£ ƒë·ªãnh nghƒ©a c√°c type n√†y
import http from "../api/http";
import type { SKUType } from "../models/shared/shared-sku.model";

// Bi·∫øn ƒë·ªÉ l∆∞u tr·ªØ socket instance b√™n ngo√†i component ƒë·ªÉ kh√¥ng b·ªã kh·ªüi t·∫°o l·∫°i m·ªói l·∫ßn render
let socket: Socket;

const ProductDetailPage: React.FC = () => {
  // State cho d·ªØ li·ªáu s·∫£n ph·∫©m, cho ph√©p null ƒë·ªÉ x·ª≠ l√Ω tr∆∞·ªùng h·ª£p b·ªã x√≥a
  const [product, setProduct] = useState<GetProductDetailResType | null>();
  // State ƒë·ªÉ theo d√µi t√¨nh tr·∫°ng s·∫£n ph·∫©m c√≥ b·ªã x√≥a hay kh√¥ng
  const [isDeleted, setIsDeleted] = useState(false);
  // State cho s·ªë l∆∞·ª£ng ng∆∞·ªùi d√πng mu·ªën mua
  const [quantity, setQuantity] = useState(1);
  // State cho ·∫£nh ch√≠nh ƒëang hi·ªÉn th·ªã
  const [mainImage, setMainImage] = useState<string>("");
  // State cho c√°c l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng
  const [selectedColor, setSelectedColor] = useState<string>("");
  const [selectedSize, setSelectedSize] = useState<string>("");
  // State cho SKU t∆∞∆°ng ·ª©ng v·ªõi l·ª±a ch·ªçn
  const [selectedSku, setSelectedSku] = useState<SKUType | null>(null);

  const { productId } = useParams<{ productId: string }>();

  // Effect ƒë·ªÉ fetch d·ªØ li·ªáu s·∫£n ph·∫©m ban ƒë·∫ßu khi component ƒë∆∞·ª£c mount ho·∫∑c productId thay ƒë·ªïi
  useEffect(() => {
    const fetchProduct = async () => {
      try {
        const res = await http.get(`/products/${productId}`);
        const data = res.data as GetProductDetailResType;
        setProduct(data);

        // Kh·ªüi t·∫°o c√°c gi√° tr·ªã m·∫∑c ƒë·ªãnh sau khi c√≥ d·ªØ li·ªáu
        if (data.images.length > 0) {
          setMainImage(data.images[0]);
        }
        if (data.variants.length > 0) {
          setSelectedColor(data.variants[0]?.options?.[0] || "");
          setSelectedSize(data.variants[1]?.options?.[0] || "");
        }
      } catch (error) {
        console.log(error);
        // N·∫øu API tr·∫£ v·ªÅ l·ªói (v√≠ d·ª•: 404 Not Found), ƒë·∫∑t c·ªù s·∫£n ph·∫©m ƒë√£ b·ªã x√≥a
        setIsDeleted(true);
      }
    };
    fetchProduct();
  }, [productId]);

  // Effect ƒë·ªÉ qu·∫£n l√Ω v√≤ng ƒë·ªùi c·ªßa k·∫øt n·ªëi WebSocket
  useEffect(() => {
    // L·∫•y access token t·ª´ localStorage (ho·∫∑c b·∫•t c·ª© n∆°i n√†o b·∫°n l∆∞u tr·ªØ)
    const accessToken = localStorage.getItem("accessToken");

    // Ch·ªâ kh·ªüi t·∫°o k·∫øt n·ªëi n·∫øu ng∆∞·ªùi d√πng ƒë√£ ƒëƒÉng nh·∫≠p (c√≥ token)
    if (!accessToken) {
      console.log("Ng∆∞·ªùi d√πng ch∆∞a ƒëƒÉng nh·∫≠p, kh√¥ng kh·ªüi t·∫°o WebSocket.");
      return; // D·ª´ng l·∫°i t·∫°i ƒë√¢y
    }

    // Kh·ªüi t·∫°o socket v·ªõi header x√°c th·ª±c
    socket = io("http://localhost:3003/product", {
      extraHeaders: {
        Authorization: `Bearer ${accessToken}`, // üîë G·ª≠i token l√™n ƒë√¢y
      },
    });

    // Listener khi k·∫øt n·ªëi th√†nh c√¥ng
    socket.on("connect", () => {
      console.log("‚úÖ WebSocket connected successfully! ID:", socket.id);
      if (productId) {
        socket.emit("joinProductRoom", Number(productId));
      }
    });

    // Listener ƒë·ªÉ b·∫Øt l·ªói k·∫øt n·ªëi
    socket.on("connect_error", (err) => {
      console.error("‚ùå WebSocket connection error:", err.message);
      // N·∫øu l·ªói l√† "Thi·∫øu Authentication", c√≥ th·ªÉ token ƒë√£ h·∫øt h·∫°n
      if (err.message.includes("Authentication")) {
        // T·∫°i ƒë√¢y b·∫°n c√≥ th·ªÉ x·ª≠ l√Ω vi·ªác ƒëƒÉng xu·∫•t ng∆∞·ªùi d√πng ho·∫∑c refresh token
      }
    });

    // C√°c listener kh√°c kh√¥ng ƒë·ªïi...
    socket.on("productUpdated", (updatedProduct: GetProductDetailResType) => {
      console.log(
        "S·∫£n ph·∫©m ƒë∆∞·ª£c c·∫≠p nh·∫≠t theo th·ªùi gian th·ª±c:",
        updatedProduct
      );
      setProduct(updatedProduct);
    });

    socket.on("productDeleted", (data: { message: string }) => {
      console.log(data.message);
      setIsDeleted(true);
    });

    // H√†m d·ªçn d·∫πp kh√¥ng ƒë·ªïi
    return () => {
      if (socket) {
        if (productId) {
          socket.emit("leaveProductRoom", Number(productId));
        }
        socket.disconnect();
      }
    };
  }, [productId]);

  // Effect ƒë·ªÉ t√¨m SKU t∆∞∆°ng ·ª©ng m·ªói khi l·ª±a ch·ªçn c·ªßa ng∆∞·ªùi d√πng thay ƒë·ªïi
  useEffect(() => {
    if (product && selectedColor && selectedSize) {
      const skuValue = `${selectedColor}-${selectedSize}`;
      const foundSku = product.skus.find((sku) => sku.value === skuValue);
      setSelectedSku(foundSku || null);
      setQuantity(1); // Reset s·ªë l∆∞·ª£ng v·ªÅ 1 m·ªói khi thay ƒë·ªïi phi√™n b·∫£n
    }
  }, [product, selectedColor, selectedSize]);

  // H√†m format ti·ªÅn t·ªá
  const formatCurrency = (amount: number) =>
    new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
    }).format(amount);

  // H√†m x·ª≠ l√Ω tƒÉng/gi·∫£m s·ªë l∆∞·ª£ng, ki·ªÉm tra v·ªõi stock c·ªßa SKU ƒë√£ ch·ªçn
  const handleQuantityChange = (amount: number) => {
    const newQuantity = quantity + amount;
    if (selectedSku && newQuantity >= 1 && newQuantity <= selectedSku.stock) {
      setQuantity(newQuantity);
    }
  };

  const handleAddToCart = (e: React.FormEvent) => {
    e.preventDefault();
    if (!selectedSku || selectedSku.stock <= 0) {
      alert(
        "S·∫£n ph·∫©m n√†y ƒë√£ h·∫øt h√†ng ho·∫∑c b·∫°n ch∆∞a ch·ªçn ƒë·∫ßy ƒë·ªß. Vui l√≤ng th·ª≠ l·∫°i."
      );
      return;
    }
    alert(
      `ƒê√£ th√™m v√†o gi·ªè: ${quantity} s·∫£n ph·∫©m "${product?.name}", M√†u: ${selectedColor}, Size: ${selectedSize}`
    );
  };

  // --- RENDER LOGIC ---

  if (isDeleted) {
    return (
      <div className="content" style={{ textAlign: "center", padding: "50px" }}>
        <h2>S·∫£n ph·∫©m kh√¥ng t·ªìn t·∫°i</h2>
        <p>S·∫£n ph·∫©m b·∫°n ƒëang t√¨m ki·∫øm c√≥ th·ªÉ ƒë√£ b·ªã x√≥a ho·∫∑c kh√¥ng c√≥ s·∫µn.</p>
      </div>
    );
  }

  if (!product) {
    return (
      <div style={{ textAlign: "center", padding: "50px" }}>Loading...</div>
    );
  }

  return (
    <div className="content">
      <div className="content_detailProduct">
        <div className="img_product">
          <img
            id="main-image"
            src={mainImage}
            alt={product.name}
            className="image_shirt"
          />
          <div className="image_detail_product">
            {product.images.filter(Boolean).map((url, index) => (
              <img
                key={index}
                src={url}
                alt={`${product.name} - thumbnail ${index + 1}`}
                className="image_shirt_detail"
                style={{ cursor: "pointer" }}
                onClick={() => setMainImage(url)}
              />
            ))}
          </div>
        </div>

        <div className="inf_product">
          <h2 className="title_inf_products">{product.name}</h2>
          <p className="price_inf_products">
            <span>{formatCurrency(product.virtualPrice)}</span>
          </p>

          <p className="status_inf_products">
            T√¨nh tr·∫°ng:{" "}
            <span className="status_color_inf">
              {selectedSku
                ? selectedSku.stock > 0
                  ? `C√≤n h√†ng (T·ªìn kho: ${selectedSku.stock})`
                  : "H·∫øt h√†ng"
                : "Vui l√≤ng ch·ªçn ƒë·∫ßy ƒë·ªß t√πy ch·ªçn"}
            </span>
          </p>

          {product.variants[0]?.options.length > 0 && (
            <>
              <p className="color_inf_products">M√†u s·∫Øc:</p>
              <div className="item_box_color">
                {product.variants[0].options.map((color, index) => (
                  <div key={index} className="color-item">
                    <input
                      type="radio"
                      id={`color_${index}`}
                      name="selected_color"
                      value={color}
                      checked={selectedColor === color}
                      onChange={() => setSelectedColor(color)}
                    />
                    <label htmlFor={`color_${index}`}>
                      <span className="color-name">{color}</span>
                    </label>
                  </div>
                ))}
              </div>
            </>
          )}

          {product.variants[1]?.options.length > 0 && (
            <>
              <p className="size_inf_products">K√≠ch th∆∞·ªõc:</p>
              <div className="box_option_size">
                {product.variants[1].options.map((size, index) => (
                  <div key={index} className="size-item">
                    <input
                      type="radio"
                      id={`size_${index}`}
                      name="selected_size"
                      value={size}
                      checked={selectedSize === size}
                      onChange={() => setSelectedSize(size)}
                    />
                    <label htmlFor={`size_${index}`}>{size}</label>
                  </div>
                ))}
              </div>
            </>
          )}

          <p className="quantity_inf_products">S·ªë l∆∞·ª£ng:</p>
          <div className="quantity_box">
            <div className="detail_quatity">
              <button
                className="totalProducts"
                onClick={() => handleQuantityChange(-1)}
                disabled={!selectedSku}
              >
                ‚àí
              </button>
              <input id="input-qty" type="text" value={quantity} readOnly />
              <button
                className="totalProducts"
                onClick={() => handleQuantityChange(1)}
                disabled={!selectedSku}
              >
                +
              </button>
            </div>
            <form onSubmit={handleAddToCart}>
              <button
                type="submit"
                className="btn_quantity_box"
                disabled={!selectedSku || selectedSku.stock <= 0}
              >
                {!selectedSku || selectedSku.stock > 0
                  ? "Th√™m v√†o gi·ªè h√†ng"
                  : "H·∫øt h√†ng"}
              </button>
            </form>
          </div>
        </div>
      </div>
    </div>
  );
};

export default ProductDetailPage;
